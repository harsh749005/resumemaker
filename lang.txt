import React, { useState } from "react";
import {
  Alert,
  Pressable,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";

const LanguagesStep = ({
  data,
  handleLanguage,
  nextStep,
  prevStep,
}) => {
  const languages = data.languages || [];
  const [inputText, setInputText] = useState("");
  const [showSuggestions, setShowSuggestions] = useState(false);
  console.log(languages);
  // Comprehensive language/technology list
  const allTechnologies = [
    // Programming Languages
    "JavaScript",
    "Python",
    "Java",
    "C++",
    "C#",
    "PHP",
    "Ruby",
    "Go",
    "Rust",
    "Swift",
    "Kotlin",
    "TypeScript",
    "Dart",
    "Scala",
    "Perl",
    "R",
    "MATLAB",

    // Web Technologies
    "HTML",
    "CSS",
    "React",
    "Vue.js",
    "Angular",
    "Node.js",
    "Express.js",
    "Next.js",
    "Nuxt.js",
    "Svelte",
    "Bootstrap",
    "Tailwind CSS",
    "Sass",
    "Less",

    // Databases
    "MySQL",
    "PostgreSQL",
    "MongoDB",
    "Redis",
    "SQLite",
    "Oracle",
    "SQL Server",
    "Cassandra",
    "DynamoDB",
    "Firebase",

    // Mobile Development
    "React Native",
    "Flutter",
    "iOS Development",
    "Android Development",
    "Xamarin",
    "Ionic",
    "Cordova",

    // Cloud & DevOps
    "AWS",
    "Azure",
    "Google Cloud",
    "Docker",
    "Kubernetes",
    "Jenkins",
    "GitHub Actions",
    "GitLab CI",
    "Terraform",
    "Ansible",

    // Tools & Frameworks
    "Git",
    "Linux",
    "Windows",
    "macOS",
    "Webpack",
    "Vite",
    "Babel",
    "ESLint",
    "Prettier",
    "Jest",
    "Cypress",
    "Selenium",
  ].sort();

  const handleNext = () => {
    if (languages.length === 0) {
      Alert.alert(
        "Select One Language",
        "Please select at least one language or technology to continue",
        [{ text: "OK" }]
      );
      return;
    }
    nextStep();
  };

  const filteredSuggestions = allTechnologies.filter(
    (tech) =>
      tech.toLowerCase().includes(inputText.toLowerCase()) &&
      !languages.includes(tech)
  );

  const handleInputChange = (text) => {
    setInputText(text);
    setShowSuggestions(text.length > 0);
  };

  const handleManualAdd = () => {
    if (inputText.trim() && !languages.includes(inputText.trim())) {
      handleLanguage(inputText.trim());
      setInputText("");
      setShowSuggestions(false);
    }
  };

  return (
    <>
      <StatusBar barStyle="dark-content" />
      <View style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.title}>Languages & Technologies</Text>
          <Text style={styles.subtitle}>
            Add your technical skills, programming languages, and tools
          </Text>
        </View>

        {/* Input Field */}
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            placeholder="Type to search or add new language/technology..."
            value={inputText}
            onChangeText={handleInputChange}
            onSubmitEditing={handleManualAdd}
          />
          {inputText.length > 0 && (
            <TouchableOpacity style={styles.addBtn} onPress={handleManualAdd}>
              <Text style={styles.addBtnText}>Add</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* Suggestions */}
        {showSuggestions && filteredSuggestions.length > 0 && (
          <View style={styles.suggestionsContainer}>
            <Text style={styles.suggestionsTitle}>Suggestions:</Text>
            <ScrollView style={styles.suggestionsScroll} nestedScrollEnabled>
              {filteredSuggestions.slice(0, 10).map((tech, index) => (
                <TouchableOpacity
                  key={index}
                  style={styles.suggestionItem}
                  onPress={() => handleLanguage(tech)}
                >
                  <Text style={styles.suggestionText}>{tech}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        )}
        {/* Selected Languages */}
        <ScrollView showsVerticalScrollIndicator={false}>
          <View style={styles.selectedSection}>
            <Text style={styles.sectionTitle}>
              Selected Languages & Technologies ({languages.length})
            </Text>
            <View style={styles.selectedContainer}>
              {languages.map((lang, index) => (
                <View key={index} style={styles.selectedTag}>
                  <Text style={styles.selectedTagText}>{lang}</Text>
                  <TouchableOpacity
                    onPress={() => handleLanguage(lang)}
                    style={styles.removeBtn}
                  >
                    <Text style={styles.removeBtnText}>Ã—</Text>
                  </TouchableOpacity>
                </View>
              ))}
              {languages.length === 0 && (
                <Text style={styles.emptyText}>
                  No languages selected yet. Start typing to add some!
                </Text>
              )}
            </View>
          </View>

          {/* Popular Technologies */}
          <View style={styles.popularSection}>
            <Text style={styles.sectionTitle}>Popular Technologies</Text>
            <View style={styles.langContainer}>
              {[
                "JavaScript",
                "Python",
                "React",
                "Node.js",
                "Java",
                "TypeScript",
                "PHP",
                "MySQL",
              ].map((lang, index) => (
                <Pressable
                  key={index}
                  style={[
                    styles.langOptions,
                    { opacity: languages.includes(lang) ? 0.5 : 1 },
                  ]}
                  onPress={() => handleLanguage(lang)}
                  disabled={languages.includes(lang)}
                >
                  <Text style={styles.langText}>{lang}</Text>
                </Pressable>
              ))}
            </View>
          </View>
        </ScrollView>

        {/* Navigation Buttons */}
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.backButton} onPress={prevStep}>
            <Text style={styles.backButtonText}>BACK</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.nextButton} onPress={handleNext}>
            <Text style={styles.nextButtonText}>NEXT</Text>
          </TouchableOpacity>
        </View>

        {/* Progress Indicator */}
        <View style={styles.progressContainer}>
          <Text style={styles.progressText}>Step 3 of 4</Text>
        </View>
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
    backgroundColor: "#ffffff",
  },
  header: {
    alignItems: "center",
    marginBottom: 20,
  },
  title: {
    fontFamily: "PlayfairDisplayRegular",
    fontSize: 28,
    color: "#333333",
    textAlign: "center",
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    color: "#a9a9a9",
    textAlign: "center",
    lineHeight: 24,
    paddingHorizontal: 20,
    fontFamily: "WorkSansRegular",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 15,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    fontFamily: "WorkSansRegular",
  },
  addBtn: {
    backgroundColor: "#007AFF",
    paddingHorizontal: 15,
    paddingVertical: 12,
    marginLeft: 10,
  },
  addBtnText: {
    color: "white",
    fontFamily: "WorkSansMedium",
  },
  suggestionsContainer: {
    backgroundColor: "#f9f9f9",
    padding: 10,
    marginBottom: 15,
    maxHeight: 150,
  },
  suggestionsTitle: {
    fontSize: 14,
    fontFamily: "WorkSansMedium",
    color: "#666",
    marginBottom: 8,
  },
  suggestionsScroll: {
    maxHeight: 100,
  },
  suggestionItem: {
    paddingVertical: 8,
    paddingHorizontal: 5,
  },
  suggestionText: {
    fontSize: 15,
    fontFamily: "WorkSansRegular",
    color: "#007AFF",
  },
  selectedSection: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: "WorkSansMedium",
    color: "#333",
    marginBottom: 10,
  },
  selectedContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 8,
    minHeight: 50,
  },
  selectedTag: {
    backgroundColor: "#007AFF",
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  selectedTagText: {
    color: "white",
    fontSize: 14,
    fontFamily: "WorkSansRegular",
  },
  removeBtn: {
    marginLeft: 6,
    // width: 20,
    // height: 20,
    // backgroundColor: "rgba(255,255,255,0.3)",
    alignItems: "center",
    justifyContent: "center",
  },
  removeBtnText: {
    color: "white",
    fontSize: 16,
    fontFamily: "WorkSansMedium",
  },
  emptyText: {
    color: "#999",
    fontStyle: "italic",
    fontFamily: "WorkSansRegular",
    alignSelf: "center",
    marginTop: 15,
  },
  popularSection: {
    marginBottom: 20,
  },
  langContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 10,
  },
  langOptions: {
    backgroundColor: "#f9f9f9",
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    alignSelf: "flex-start",
  },
  langText: {
    textAlign: "center",
    fontFamily: "WorkSansRegular",
    fontSize: 14,
    color: "#333",
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 20,
    marginBottom: 10,
  },
  backButton: {
    backgroundColor: "#f0f0f0",
    paddingVertical: 12,
    paddingHorizontal: 30,
    minWidth: 100,
  },
  backButtonText: {
    color: "#333",
    textAlign: "center",
    fontSize: 16,
    fontFamily: "WorkSansMedium",
  },
  nextButton: {
    backgroundColor: "#000000",
    paddingVertical: 12,
    paddingHorizontal: 30,
    minWidth: 100,
  },
  nextButtonText: {
    color: "white",
    textAlign: "center",
    fontSize: 16,
    fontFamily: "WorkSansMedium",
  },
  progressContainer: {
    alignItems: "center",
    marginBottom: 20,
  },
  progressText: {
    fontSize: 14,
    color: "#999999",
    fontFamily: "WorkSansRegular",
  },
});

export default LanguagesStep;







import { useUser } from "@clerk/clerk-expo";

const fillTemplate = (template, formData) => {
  // Get user data from Clerk
  const { user } = useUser();
  
  // Helper function to safely get nested properties
  const getSafeValue = (obj, path, defaultValue = "") => {
    return path.split('.').reduce((current, key) => {
      return current && current[key] !== undefined ? current[key] : defaultValue;
    }, obj);
  };

  // Get personal info with fallbacks
  const getName = () => {
    return getSafeValue(formData, 'personal_info.name') || 
           user?.firstName + ' ' + user?.lastName || 
           user?.username || 
           "";
  };

  const getEmail = () => {
    return getSafeValue(formData, 'personal_info.email') || 
           user?.emailAddresses?.[0]?.emailAddress || 
           "";
  };

  // Generate skills HTML
  const generateSkillsHTML = () => {
    if (!formData.skills || typeof formData.skills !== 'object') {
      return "";
    }
    
    return Object.entries(formData.skills)
      .filter(([category, skills]) => Array.isArray(skills) && skills.length > 0)
      .map(([category, skills]) => 
        `<p><strong>${category}:</strong> ${skills.join(", ")}</p>`
      )
      .join("");
  };

  // Generate experience HTML
  const generateExperienceHTML = () => {
    if (!Array.isArray(formData.work_experience)) {
      return "";
    }
    
    return formData.work_experience
      .map(exp => {
        const role = exp.role || "Position";
        const company = exp.company || "Company";
        
        // Handle different date formats
        let duration = "";
        if (exp.start && exp.end) {
          duration = `${exp.start} - ${exp.end}`;
        } else if (exp.years) {
          duration = exp.years;
        } else if (exp.start) {
          duration = `${exp.start} - Present`;
        }
        
        const durationText = duration ? ` (${duration})` : "";
        
        let html = `<li><strong>${role}</strong> at ${company}${durationText}`;
        
        // Add description if available
        if (exp.description) {
          html += `<br><em>${exp.description}</em>`;
        }
        
        html += `</li>`;
        return html;
      })
      .join("");
  };

  // Generate education HTML
  const generateEducationHTML = () => {
    if (!Array.isArray(formData.education)) {
      return "";
    }
    
    return formData.education
      .map(edu => {
        const degree = edu.degree || "Degree";
        const institution = edu.institution || edu.school || "Institution";
        const field = edu.field ? ` in ${edu.field}` : "";
        
        // Handle different date formats
        let year = "";
        if (edu.graduation_year || edu.year) {
          year = ` (${edu.graduation_year || edu.year})`;
        } else if (edu.start && edu.end) {
          year = ` (${edu.start} - ${edu.end})`;
        }
        
        // Add CGPA if available
        const cgpa = edu.cgpa ? ` - CGPA: ${edu.cgpa}` : "";
        
        return `<li>${degree}${field} - ${institution}${year}${cgpa}</li>`;
      })
      .join("");
  };

  // Generate certifications HTML
  const generateCertificationsHTML = () => {
    if (!Array.isArray(formData.certifications)) {
      return "";
    }
    
    return formData.certifications
      .filter(cert => cert && cert.trim() !== "")
      .map(cert => `<li>${cert}</li>`)
      .join("");
  };

  // Generate languages HTML
  const generateLanguagesHTML = () => {
    if (!Array.isArray(formData.languages)) {
      return "";
    }
    
    return formData.languages
      .filter(lang => lang && lang.trim() !== "")
      .map(lang => `<li>${lang}</li>`)
      .join("");
  };

  // Replace all placeholders in the template
  return template
    .replace(/\{\{name\}\}/g, getName())
    .replace(/\{\{email\}\}/g, getEmail())
    .replace(/\{\{phone\}\}/g, getSafeValue(formData, 'personal_info.phone'))
    .replace(/\{\{address\}\}/g, getSafeValue(formData, 'personal_info.address'))
    .replace(/\{\{summary\}\}/g, formData.professional_summary || "")
    .replace(/\{\{skills\}\}/g, generateSkillsHTML())
    .replace(/\{\{experience\}\}/g, generateExperienceHTML())
    .replace(/\{\{education\}\}/g, generateEducationHTML())
    .replace(/\{\{certifications\}\}/g, generateCertificationsHTML())
    .replace(/\{\{languages\}\}/g, generateLanguagesHTML());
};

export default fillTemplate;