export const template = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Harsh Patel - Resume</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Times New Roman', Times, serif;
            line-height: 1.4;
            color: #000;
            background-color: #fff;
            font-size: 11px;
        }

        .resume-container {
            max-width: 8.5in;
            margin: 0 auto;
            padding: 0.5in;
            background-color: white;
            min-height: 11in;
        }

        .header {
            margin-bottom: 20px;
            padding-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .left-header {
            text-align: left;
        }

        .right-header {
            text-align: right;
        }

        .name {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 5px;
            letter-spacing: 1px;
        }

        .title {
            font-size: 12px;
            margin-bottom: 8px;
            color: #333;
        }

        .contact-info {
            font-size: 10px;
            line-height: 1.3;
        }

        .contact-info a {
            color: #000;
            text-decoration: none;
        }

        .section {
            margin-bottom: 20px;
        }

        .section-title {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 8px;
            text-transform: uppercase;
            border-bottom: 1px solid #000;
            padding-bottom: 2px;
        }

        .experience-item, .project-item {
            margin-bottom: 15px;
        }

        .job-header, .project-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 5px;
        }

        .company-role {
            font-weight: bold;
            font-size: 12px;
        }

        .company-name {
            font-weight: bold;
            font-size: 11px;
        }

        .job-title {
            font-style: italic;
            font-size: 11px;
        }

        .duration {
            font-size: 10px;
            font-style: italic;
            text-align: right;
        }

        .project-name {
            font-weight: bold;
            font-style: italic;
            font-size: 11px;
        }

        .tech-stack {
            font-size: 10px;
            color: #666;
        }

        .bullet-points {
            list-style: none;
            padding-left: 0;
        }

        .bullet-points li {
            margin-bottom: 4px;
            padding-left: 25px;
            position: relative;
            font-size: 10px;
            line-height: 1.5;
        }

        .bullet-points li::before {
            content: "•";
            position: absolute;
            left: 12px;
            font-weight: bold;
        }

        .skills-content {
            font-size: 10px;
            line-height: 1.5;
        }

        .skill-category {
            margin-bottom: 3px;
        }

        .skill-label {
            font-weight: bold;
            display: inline-block;
            min-width: 140px;
        }

        .education-item {
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .education-left {
            flex: 1;
        }

        .education-right {
            text-align: right;
            font-size: 10px;
        }

        .education-details {
            font-weight: bold;
            font-size: 11px;
        }

        .degree {
            font-size: 10px;
            margin-top: 2px;
        }

        .gpa {
            font-size: 10px;
            margin-top: 2px;
        }

        .summary-content {
            font-size: 10px;
            line-height: 1.5;
        }

        .summary-content li {
            margin-bottom: 4px;
            padding-left: 25px;
            position: relative;
            list-style: none;
            line-height: 1.5;
        }

        .summary-content li::before {
            content: "•";
            position: absolute;
            left: 12px;
            font-weight: bold;
        }

        .project-link {
            font-size: 9px;
            color: #0066cc;
            text-decoration: none;
        }

        .contact-icon {
            width: 16px;
            height: 16px;
            vertical-align: middle;
            margin-right: 4px;
        }
        .project-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="resume-container">
        <!-- Header -->
        <div class="header">
            <div class="left-header">
                <div class="name">HARSH PATEL</div>
                <div class="title">Full Stack Developer | React.js | Express.js |<br>MySQL | MongoDB | Tailwind CSS</div>
                <div class="contact-info">
                    <img src="assets/images/logos/email.png" alt="Email" class="contact-icon"><a href="mailto:patelharsh749005@gmail.com">patelharsh749005@gmail.com</a><br>
                    <img src="assets/images/logos/phone.png" alt="Phone" class="contact-icon">+91 9054-140-350
                </div>
            </div>
            <div class="right-header">
                <div class="contact-info">
                    <img src="assets/images/logos/github.png" alt="GitHub" class="contact-icon"><a href="https://github.com/harsh749005">github.com/harsh749005</a><br>
                    <img src="assets/images/logos/linkedin.png" alt="LinkedIn" class="contact-icon"><a href="https://linkedin.com/in/harsh">linkedin.com/in/harsh</a><br>
                    <img src="assets/images/logos/leetcode.png" alt="LeetCode" class="contact-icon"><a href="https://leetcode.com/u/harshpatel">leetcode.com/u/harshpatel</a><br>
                    <img src="assets/images/logos/twitter.png" alt="X/Twitter" class="contact-icon"><a href="https://x.com/harsh2461">x.com/harsh2461</a>
                </div>
            </div>
        </div>

        <!-- Experience Section -->
        <div class="section">
            <div class="section-title">Experience</div>
            
            <div class="experience-item">
                <div class="job-header">
                    <div>
                        <div class="company-name">AxamineAI</div>
                        <div class="job-title">FullStack Developer</div>
                    </div>
                    <div class="duration">May 2025 - present</div>
                </div>
                <ul class="bullet-points">
                    <li>Developed and managed backend using Next.js, Tailwind and serverless Neon DB.</li>
                    <li>Built APIs to efficiently store models and user conversations.</li>
                    <li>Designed secure APIs and optimized PostgreSQL and Neon DB serverless databases for performance.</li>
                    <li>Redesigned UI of the Chat Bot which increases the user interactivity.</li>
                    <li>Secured deployment on Vercel.</li>
                </ul>
            </div>

            <div class="experience-item">
                <div class="job-header">
                    <div>
                        <div class="company-name">OpenRag</div>
                        <div class="job-title">FullStack Developer</div>
                    </div>
                    <div class="duration">Jan 2025 – Feb 2025</div>
                </div>
                <ul class="bullet-points">
                    <li>Redesigned the whole website using React.js, ReactBits, Mongodb and Express, this led to increase in user traffic by 35%.</li>
                    <li>Created an admin panel to download the reports of Total user submitted form.</li>
                    <li>A javascript library ReactBits is used to add Text effects, background, and some animations.</li>
                    <li>Implemented JWT authentication and middleware to add security layer. Bcrypt is used to hash the password.</li>
                    <li>Successfully deployed the full stack application using Render for the backend and Vercel for the frontend.</li>
                </ul>
            </div>
        </div>

        <!-- Projects Section -->
        <div class="section">
            <div class="section-title">Projects</div>
            
            <div class="project-item">
                <div class="project-header">
                    <div>
                        <span class="project-name">GhostSafe</span> – <span class="tech-stack">Next.js, NeonDB, Tailwind CSS, JWT authentication, Bcrypt</span>
                    </div>
                </div>
                <ul class="bullet-points">
                    <li>Built a secure platform focused on protecting user data and privacy with responsive UI and JWT authentication for security.</li>
                    <li>Developed CRUD Operation, Inserting, Fetching and Updating for efficient data management.</li>
                    <li>Used Jose and Bcrypt to securely handle password encryption and decryption.</li>
                    <li>A live demo: <a href="https://ghost-safe.vercel.app/" class="project-link">https://ghost-safe.vercel.app/</a></li>
                </ul>
            </div>

            <div class="project-item">
                <div class="project-header">
                    <div>
                        <span class="project-name">Foodie</span> – <span class="tech-stack">React.js, Tailwind CSS</span>
                    </div>
                </div>
                <ul class="bullet-points">
                    <li>Developed a website showcasing different food items with responsive UI.</li>
                    <li>Implemented Content Provider to access the data across the pages.</li>
                    <li>A live demo: <a href="https://harsh749005.github.io/foodie/" class="project-link">https://harsh749005.github.io/foodie/</a></li>
                </ul>
            </div>

            <div class="project-item">
                <div class="project-header">
                    <div>
                        <span class="project-name">PetPals</span> – <span class="tech-stack">React.js, Tailwind CSS</span>
                    </div>
                </div>
                <ul class="bullet-points">
                    <li>Built a responsive pet marketplace website.</li>
                    <li>A live demo: <a href="https://pet-pals-ten.vercel.app/" class="project-link">https://pet-pals-ten.vercel.app/</a></li>
                </ul>
            </div>
        </div>

        <!-- Skills Section -->
        <div class="section">
            <div class="section-title">Skills</div>
            <div class="skills-content">
                <div class="skill-category">
                    <span class="skill-label">Programming Languages:</span> JavaScript, SQL, HTML/CSS, NoSQL.
                </div>
                <div class="skill-category">
                    <span class="skill-label">Web Development:</span> React.js, Next.js, Node.js, Express.js, PostgreSQL, MongoDB, JWT, RESTful APIs, Tailwind CSS.
                </div>
                <div class="skill-category">
                    <span class="skill-label">DevOps & Tools:</span> Git/GitHub, Docker, Vite.js, Render, Vercel.
                </div>
            </div>
        </div>

        <!-- Summary Section -->
        <div class="section">
            <div class="section-title">Summary of qualification</div>
            <ul class="summary-content">
                <li>Experience in full stack development and continuously enhancing my skills in frontend and backend.</li>
                <li>I am eager to leverage my skills to create scalable web applications and solve complex problems.</li>
                <li>My projects highlight my ability to seamlessly integrate frontend and backend technologies.</li>
            </ul>
        </div>

        <!-- Education Section -->
        <div class="section">
            <div class="section-title">Education</div>
            
            <div class="education-item">
                <div class="education-left">
                    <div class="education-details">ITM(SLS) Baroda University: B.TECH in Computer Science and Engineering</div>
                </div>
                <div class="education-right">
                    <div class="duration">May 2023 – Present</div>
                    <div class="gpa">Major GPA: 8.81 / 10</div>
                </div>
            </div>

            <div class="education-item">
                <div class="education-left">
                    <div class="education-details">ITM(SLS) Baroda University: Diploma in Computer Science and Engineering</div>
                </div>
                <div class="education-right">
                    <div class="duration">May 2021 – April 2023</div>
                    <div class="gpa">Major GPA: 9.23 / 10</div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

`




login


import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  StatusBar,
  SafeAreaView,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

// Login Screen Component
const LoginScreen = ({ onSwitchToSignup, onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }
    
    if (!email.includes('@')) {
      Alert.alert('Error', 'Please enter a valid email address');
      return;
    }

    setIsLoading(true);
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
      onLogin?.();
    }, 1500);
  };

  const handleForgotPassword = () => {
    Alert.alert(
      'Reset Password',
      'Password reset link will be sent to your email address.',
      [{ text: 'OK' }]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      <LinearGradient
        colors={['#667eea', '#764ba2', '#f093fb', '#f5576c']}
        locations={[0, 0.3, 0.7, 1]}
        style={styles.gradient}
      >
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardView}
        >
          <ScrollView contentContainerStyle={styles.scrollContainer}>
            {/* Header */}
            <View style={styles.header}>
              <Text style={styles.welcomeText}>Welcome Back</Text>
              <Text style={styles.headerSubtext}>Sign in to continue building your resume</Text>
            </View>

            {/* Form Container */}
            <View style={styles.formContainer}>
              {/* Email Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Email Address</Text>
                <TextInput
                  style={styles.input}
                  placeholder="Enter your email"
                  placeholderTextColor="rgba(255,255,255,0.7)"
                  value={email}
                  onChangeText={setEmail}
                  keyboardType="email-address"
                  autoCapitalize="none"
                  autoCorrect={false}
                />
              </View>

              {/* Password Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Password</Text>
                <View style={styles.passwordContainer}>
                  <TextInput
                    style={[styles.input, styles.passwordInput]}
                    placeholder="Enter your password"
                    placeholderTextColor="rgba(255,255,255,0.7)"
                    value={password}
                    onChangeText={setPassword}
                    secureTextEntry={!showPassword}
                    autoCapitalize="none"
                  />
                  <TouchableOpacity 
                    style={styles.eyeButton}
                    onPress={() => setShowPassword(!showPassword)}
                  >
                    <Text style={styles.eyeText}>{showPassword ? '👁️' : '👁️‍🗨️'}</Text>
                  </TouchableOpacity>
                </View>
              </View>

              {/* Forgot Password */}
              <TouchableOpacity style={styles.forgotButton} onPress={handleForgotPassword}>
                <Text style={styles.forgotText}>Forgot Password?</Text>
              </TouchableOpacity>

              {/* Login Button */}
              <TouchableOpacity 
                style={[styles.primaryButton, isLoading && styles.disabledButton]} 
                onPress={handleLogin}
                disabled={isLoading}
              >
                <Text style={styles.primaryButtonText}>
                  {isLoading ? 'Signing In...' : 'Sign In'}
                </Text>
              </TouchableOpacity>

              {/* Divider */}
              <View style={styles.dividerContainer}>
                <View style={styles.dividerLine} />
                <Text style={styles.dividerText}>or</Text>
                <View style={styles.dividerLine} />
              </View>

              {/* Social Login */}
              <TouchableOpacity style={styles.socialButton}>
                <Text style={styles.socialButtonText}>📧 Continue with Google</Text>
              </TouchableOpacity>

              {/* Switch to Signup */}
              <View style={styles.switchContainer}>
                <Text style={styles.switchText}>Don't have an account? </Text>
                <TouchableOpacity onPress={onSwitchToSignup}>
                  <Text style={styles.switchLink}>Sign Up</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </KeyboardAvoidingView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Signup Screen Component
const SignupScreen = ({ onSwitchToLogin, onSignup }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [agreedToTerms, setAgreedToTerms] = useState(false);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSignup = async () => {
    const { fullName, email, password, confirmPassword } = formData;

    if (!fullName || !email || !password || !confirmPassword) {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }

    if (!email.includes('@')) {
      Alert.alert('Error', 'Please enter a valid email address');
      return;
    }

    if (password.length < 6) {
      Alert.alert('Error', 'Password must be at least 6 characters long');
      return;
    }

    if (password !== confirmPassword) {
      Alert.alert('Error', 'Passwords do not match');
      return;
    }

    if (!agreedToTerms) {
      Alert.alert('Error', 'Please agree to the Terms of Service and Privacy Policy');
      return;
    }

    setIsLoading(true);
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
      onSignup?.();
    }, 1500);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      <LinearGradient
        colors={['#667eea', '#764ba2', '#f093fb', '#f5576c']}
        locations={[0, 0.3, 0.7, 1]}
        style={styles.gradient}
      >
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardView}
        >
          <ScrollView contentContainerStyle={styles.scrollContainer}>
            {/* Header */}
            <View style={styles.header}>
              <Text style={styles.welcomeText}>Create Account</Text>
              <Text style={styles.headerSubtext}>Join us and start building amazing resumes</Text>
            </View>

            {/* Form Container */}
            <View style={styles.formContainer}>
              {/* Full Name Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Full Name</Text>
                <TextInput
                  style={styles.input}
                  placeholder="Enter your full name"
                  placeholderTextColor="rgba(255,255,255,0.7)"
                  value={formData.fullName}
                  onChangeText={(value) => handleInputChange('fullName', value)}
                  autoCapitalize="words"
                />
              </View>

              {/* Email Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Email Address</Text>
                <TextInput
                  style={styles.input}
                  placeholder="Enter your email"
                  placeholderTextColor="rgba(255,255,255,0.7)"
                  value={formData.email}
                  onChangeText={(value) => handleInputChange('email', value)}
                  keyboardType="email-address"
                  autoCapitalize="none"
                  autoCorrect={false}
                />
              </View>

              {/* Password Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Password</Text>
                <View style={styles.passwordContainer}>
                  <TextInput
                    style={[styles.input, styles.passwordInput]}
                    placeholder="Create a password"
                    placeholderTextColor="rgba(255,255,255,0.7)"
                    value={formData.password}
                    onChangeText={(value) => handleInputChange('password', value)}
                    secureTextEntry={!showPassword}
                    autoCapitalize="none"
                  />
                  <TouchableOpacity 
                    style={styles.eyeButton}
                    onPress={() => setShowPassword(!showPassword)}
                  >
                    <Text style={styles.eyeText}>{showPassword ? '👁️' : '👁️‍🗨️'}</Text>
                  </TouchableOpacity>
                </View>
              </View>

              {/* Confirm Password Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Confirm Password</Text>
                <View style={styles.passwordContainer}>
                  <TextInput
                    style={[styles.input, styles.passwordInput]}
                    placeholder="Confirm your password"
                    placeholderTextColor="rgba(255,255,255,0.7)"
                    value={formData.confirmPassword}
                    onChangeText={(value) => handleInputChange('confirmPassword', value)}
                    secureTextEntry={!showConfirmPassword}
                    autoCapitalize="none"
                  />
                  <TouchableOpacity 
                    style={styles.eyeButton}
                    onPress={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    <Text style={styles.eyeText}>{showConfirmPassword ? '👁️' : '👁️‍🗨️'}</Text>
                  </TouchableOpacity>
                </View>
              </View>

              {/* Terms Agreement */}
              <TouchableOpacity 
                style={styles.checkboxContainer}
                onPress={() => setAgreedToTerms(!agreedToTerms)}
              >
                <View style={[styles.checkbox, agreedToTerms && styles.checkboxChecked]}>
                  {agreedToTerms && <Text style={styles.checkmark}>✓</Text>}
                </View>
                <Text style={styles.checkboxText}>
                  I agree to the <Text style={styles.linkText}>Terms of Service</Text> and{' '}
                  <Text style={styles.linkText}>Privacy Policy</Text>
                </Text>
              </TouchableOpacity>

              {/* Signup Button */}
              <TouchableOpacity 
                style={[styles.primaryButton, isLoading && styles.disabledButton]} 
                onPress={handleSignup}
                disabled={isLoading}
              >
                <Text style={styles.primaryButtonText}>
                  {isLoading ? 'Creating Account...' : 'Create Account'}
                </Text>
              </TouchableOpacity>

              {/* Divider */}
              <View style={styles.dividerContainer}>
                <View style={styles.dividerLine} />
                <Text style={styles.dividerText}>or</Text>
                <View style={styles.dividerLine} />
              </View>

              {/* Social Login */}
              <TouchableOpacity style={styles.socialButton}>
                <Text style={styles.socialButtonText}>📧 Continue with Google</Text>
              </TouchableOpacity>

              {/* Switch to Login */}
              <View style={styles.switchContainer}>
                <Text style={styles.switchText}>Already have an account? </Text>
                <TouchableOpacity onPress={onSwitchToLogin}>
                  <Text style={styles.switchLink}>Sign In</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </KeyboardAvoidingView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Main Auth Container
const AuthScreens = () => {
  const [currentScreen, setCurrentScreen] = useState('login'); // 'login' or 'signup'

  const handleLogin = () => {
    console.log('Login successful');
    // Navigate to main app
  };

  const handleSignup = () => {
    console.log('Signup successful');
    // Navigate to main app
  };

  return (
    <>
      {currentScreen === 'login' ? (
        <LoginScreen 
          onSwitchToSignup={() => setCurrentScreen('signup')}
          onLogin={handleLogin}
        />
      ) : (
        <SignupScreen 
          onSwitchToLogin={() => setCurrentScreen('login')}
          onSignup={handleSignup}
        />
      )}
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  keyboardView: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    paddingHorizontal: 24,
    paddingVertical: 40,
  },
  header: {
    alignItems: 'center',
    marginBottom: 40,
    paddingTop: 20,
  },
  welcomeText: {
    fontSize: 32,
    fontWeight: '700',
    color: 'white',
    textAlign: 'center',
    marginBottom: 8,
  },
  headerSubtext: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.9)',
    textAlign: 'center',
    lineHeight: 22,
  },
  formContainer: {
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 20,
    padding: 24,
    backdropFilter: 'blur(10px)',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 10,
    },
    shadowOpacity: 0.25,
    shadowRadius: 20,
    elevation: 10,
  },
  inputContainer: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: 'white',
    marginBottom: 8,
  },
  input: {
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    color: 'white',
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.3)',
  },
  passwordContainer: {
    position: 'relative',
  },
  passwordInput: {
    paddingRight: 50,
  },
  eyeButton: {
    position: 'absolute',
    right: 15,
    top: 15,
    padding: 5,
  },
  eyeText: {
    fontSize: 18,
  },
  forgotButton: {
    alignSelf: 'flex-end',
    marginBottom: 24,
  },
  forgotText: {
    color: 'rgba(255,255,255,0.9)',
    fontSize: 14,
    fontWeight: '500',
  },
  primaryButton: {
    backgroundColor: '#007AFF',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginBottom: 20,
    shadowColor: '#007AFF',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  disabledButton: {
    backgroundColor: 'rgba(0,122,255,0.5)',
  },
  primaryButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
  },
  dividerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 20,
  },
  dividerLine: {
    flex: 1,
    height: 1,
    backgroundColor: 'rgba(255,255,255,0.3)',
  },
  dividerText: {
    color: 'rgba(255,255,255,0.7)',
    paddingHorizontal: 16,
    fontSize: 14,
  },
  socialButton: {
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
    marginBottom: 24,
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.3)',
  },
  socialButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  switchContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  switchText: {
    color: 'rgba(255,255,255,0.8)',
    fontSize: 16,
  },
  switchLink: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 24,
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: 'rgba(255,255,255,0.6)',
    marginRight: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 2,
  },
  checkboxChecked: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  checkmark: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  checkboxText: {
    color: 'rgba(255,255,255,0.9)',
    fontSize: 14,
    lineHeight: 20,
    flex: 1,
  },
  linkText: {
    color: 'white',
    fontWeight: '600',
  },
});

export default AuthScreens;













// work experience

import DateTimePicker from "@react-native-community/datetimepicker";
import React, { useState } from "react";
import { Button, StatusBar, StyleSheet, Switch, Text, TextInput, View } from "react-native";

const WorkExperienceStep = ({
  data,
  addExperience,
  updateExperience,
  nextStep,
  prevStep,
}) => {
  const workExperience = data.work_experience || [];
  const [date, setDate] = useState(new Date());
  const [showPicker, setShowPicker] = useState({
    visible: false,
    field: null,
    index: null,
  });
  const formattedMonthYear = (currentDate) => {
    return currentDate.toLocaleDateString("en-US", {
      month: "short",
      year: "numeric",
    });
  };

  const onChange = (event, selectedDate) => {
    if (event.type === "dismissed") {
      setShowPicker({ visible: false, field: null, index: null });
      return;
    }

    const currentDate = selectedDate || date;
    setDate(currentDate);

    // save directly into workExperience
    updateExperience(
      showPicker.index,
      showPicker.field,
      formattedMonthYear(currentDate)
    );

    setShowPicker({ visible: false, field: null, index: null });
  };

  return (
    <>
    <StatusBar barStyle="dark-content" />
    <View style={styles.container}>
      <Text style={styles.title}>
        Work Experience
      </Text>

      {workExperience.map((exp, index) => (
        <View
          key={index}
          style={{
            padding: 10,
            borderWidth: 1,
            borderColor: "#ccc",
            // borderRadius: 8,
            marginBottom: 12,
          }}
        >
          <Text style={styles.subtitle}>Experience {index + 1}</Text>

          <TextInput
         style={styles.input}
            placeholder="Company"
            value={exp.company || ""}
            onChangeText={(val) => updateExperience(index, "company", val)}
          />

          <TextInput
           style={styles.input}
            placeholder="Role"
            value={exp.role || ""}
            onChangeText={(val) => updateExperience(index, "role", val)}
          />
          <TextInput
            style={styles.input}
            placeholder="Year of experience"
            value={exp.year || ""}
            onChangeText={(val) => updateExperience(index, "year", val)}
          />

          {/* Start Date */}
          <View style={{ marginTop: 10 }}>
            <Text>Start: {exp.start || "Not selected"}</Text>
            <Button
              title="Pick Start Date"
              onPress={() =>
                setShowPicker({ visible: true, field: "start", index })
              }
            />
          </View>

          {/* End Date */}
          <View style={{ marginTop: 10 }}>
            <Text>End: {exp.end || "Not selected"}</Text>
            <Button
              title="Pick End Date"
              onPress={() =>
                setShowPicker({ visible: true, field: "end", index })
              }
              disabled={exp.end === "Present"}
            />
            <View
              style={{
                flexDirection: "row",
                alignItems: "center",
                marginTop: 6,
              }}
            >
              <Switch
                value={exp.end === "Present"}
                onValueChange={(val) =>
                  updateExperience(index, "end", val ? "Present" : "")
                }
              />
              <Text style={{ marginLeft: 8 }}>Currently working here</Text>
            </View>
          </View>
        </View>
      ))}

      {showPicker.visible && (
        <DateTimePicker
          value={date}
          mode="date"
          display="spinner"
          onChange={onChange}
        />
      )}

      <Button
        title="➕ Add Work Experience"
        onPress={() =>
          addExperience({ company: "", role: "", start: "", end: "" })
        }
      />

      <View
        style={{
          flexDirection: "row",
          justifyContent: "space-between",
          marginTop: 20,
        }}
      >
        <Button title="Back" onPress={prevStep} />
        <Button title="Next" onPress={nextStep} />
      </View>
    </View>
    </>

  );
};

export default WorkExperienceStep;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
    backgroundColor: "#ffffff",
  },
  
  header: {
    alignItems: "center",
    marginBottom: 30,
  },
  
  title: {
    fontFamily: "PlayfairDisplayRegular",
    fontSize: 28,
    color: "#333333",
    textAlign: "center",
    marginBottom: 10,
  },
  
  subtitle: {
    fontSize: 16,
    color: "#a9a9a9ff",
    textAlign: "center",
    lineHeight: 24,
    paddingHorizontal: 20,
    fontFamily: "WorkSansRegular",
  },
  input: {
    borderBottomWidth: 1,
    fontFamily: "PlayfairDisplayRegular",
    fontSize: 18,
    paddingVertical: 6,
  },
  
  buttonContainer: {
    alignItems: "center",
    marginTop: 30,
    marginBottom: 20,
  },
  
  button: {
    alignItems: "center",
    paddingHorizontal: 40,
    paddingVertical: 15,
    // borderRadius: 8,
    minWidth: 180,
    // Shadow
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  
  buttonText: {
    fontSize: 18,
    fontFamily: "WorkSansMedium",
  },
  
  progressContainer: {
    alignItems: "center",
    marginBottom: 20,
  },
  
  progressText: {
    fontSize: 14,
    color: "#999999",
    fontFamily: "WorkSansRegular",
  },
});



// Languages

 <ScrollView
          style={styles.scrollView}
          showsVerticalScrollIndicator={false}
        >
          {languages.map((lang, index) => (
            <View key={index} style={styles.experienceCard}>
              <View style={styles.experienceHeader}>
                <Text style={styles.experienceTitle}>Language {index + 1}</Text>
                {languages.length > 1 && (
                  <TouchableOpacity
                    style={styles.deleteButton}
                    // onPress={() => handleRemoveExperience(index)}
                  >
                    <Text style={styles.deleteButtonText}>✕</Text>
                  </TouchableOpacity>
                )}
              </View>
              <TextInput
                style={styles.input}
                placeholder={`Language ${index + 1} *`}
                placeholderTextColor="#a9a9a9"
                value={lang}
                onChangeText={(val) => updateLanguage(index, val)}
              />
            </View>
          ))}

          {/* Add Experience Button */}
          <TouchableOpacity
            style={styles.addButton}
            onPress={handleaddLanguage}
          >
            <Text style={styles.addButtonIcon}>+</Text>
            <Text style={styles.addButtonText}>ADD LANGUAGE</Text>
          </TouchableOpacity>
          {/* <Button title="➕ Add Language" onPress={() => addLanguage("")} /> */}
        </ScrollView>